name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger pipeline on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Build Docker image and push to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t nolandev1/news-backend:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push nolandev1/news-backend:latest

      # # Step 2: SSH into Raspberry Pi, clone the repo, and create .env.local file
      # - name: Set up SSH to Raspberry Pi
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ secrets.RASPBERRY_PI_HOST }}
      #     username: ${{ secrets.RASPBERRY_PI_USER }}
      #     key: ${{ secrets.RASPBERRY_PI_SSH_KEY }}

      # - name: Clone Git repository on Raspberry Pi
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_PI_USER }}@${{ secrets.RASPBERRY_PI_HOST }} "
      #       if [ ! -d '/path/to/your/project' ]; then
      #         git clone https://github.com/your-username/your-repo.git /path/to/your/project;
      #       fi
      #     "

      # - name: Create .env.local on Raspberry Pi
      #   run: |
      #     echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.local
      #     scp .env.local ${{ secrets.RASPBERRY_PI_USER }}@${{ secrets.RASPBERRY_PI_HOST }}:/path/to/your/project

      # # Step 3: Pull Docker image and run container on Raspberry Pi
      # - name: Pull Docker image and run container on Raspberry Pi
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_PI_USER }}@${{ secrets.RASPBERRY_PI_HOST }} "
      #       cd /path/to/your/project &&
      #       docker pull your-dockerhub-username/your-image-name:latest &&
      #       docker-compose --env-file /path/to/your/project/.env.local up -d
      #     "
